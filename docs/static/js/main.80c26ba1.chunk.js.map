{"version":3,"sources":["components/Home/index.jsx","services/tweetjs.js","components/Tweets/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["Home","TweetJs","ListTweetsOnUserTimeline","screenName","callback","_callApi","Action","ScreenName","Search","query","Query","request","xhr","XMLHttpRequest","URL","open","onreadystatechange","this","readyState","DONE","status","JSON","parse","response","send","stringify","Tweets","data","props","updateTweets","tweets","className","map","id","tweetId","key","options","width","Component","App","tweetsResponse","setState","statuses","id_str","state","to","exact","path","component","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","process","href","origin","addEventListener","fetch","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yTAGe,SAASA,IACtB,OAAO,qCCAF,IAAMC,EAAU,CACrBC,yBAA0B,SAASC,EAAYC,GAC7CH,EAAQI,SACN,CACEC,OAAQ,2BACRC,WAAYJ,GAEdC,IAGJI,OAAQ,SAASC,EAAOL,GACtBH,EAAQI,SACN,CACEC,OAAQ,SACRI,MAAOD,GAETL,IAGJC,SAAU,SAASM,EAASP,GAC1B,IAAIQ,EAAM,IAAIC,eACdC,IAAM,mCACNF,EAAIG,KAAK,OAAQD,KACjBF,EAAII,mBAAqB,WACnBC,KAAKC,aAAeL,eAAeM,MAAwB,MAAhBF,KAAKG,QAClDhB,EAASiB,KAAKC,MAAMV,EAAIW,YAG5BX,EAAIY,KAAKH,KAAKI,UAAUd,M,QC3BPe,G,kMACE,IAAD,OAClBzB,EAAQO,OAAO,eAAgB,SAAAmB,GAC7B,EAAKC,MAAMC,aAAaF,O,+BAIlB,IACAG,EAAWb,KAAKW,MAAhBE,OACR,OACE,wBAAIC,UAAU,eACXD,EAAOE,IAAI,SAAAC,GAAE,OACZ,wBAAIF,UAAU,eACZ,kBAAC,IAAD,CACEG,QAASD,EACTE,IAAKF,EACLG,QAAS,CAAEC,MAAO,mB,GAhBIC,cCgDrBC,E,YA9Cb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,SAAAW,GACb,EAAKC,SAAS,CACZX,OAAQU,EAAeE,SAASV,IAAI,qBAAGW,YAPzC,EAAKC,MAAQ,CACXd,OAAQ,IAHO,E,sEAaT,IAAD,OACCA,EAAWb,KAAK2B,MAAhBd,OACR,OACE,yBAAKC,UAAU,OACb,gCACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMc,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,cAKR,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhD,IACjC,kBAAC,IAAD,CACE8C,OAAK,EACLC,KAAK,UACLE,OAAQ,kBACN,kBAAC,EAAD,CAAQpB,aAAc,EAAKA,aAAcC,OAAQA,c,GArC/CQ,aCMZY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrB,QACfe,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAAS1B,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF2B,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI7C,IAAIgE,IAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,IAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,GACHK,KAAK,SAAAvC,GAEJ,IAAM4D,EAAc5D,EAAS6D,QAAQC,IAAI,gBAEnB,MAApB9D,EAASH,QACO,MAAf+D,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BV,OAAOC,SAASoC,aAKpBjC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAoB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCrC/BE,K","file":"static/js/main.80c26ba1.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.scss';\n\nexport default function Home() {\n  return <div>Home</div>;\n}\n","// TweetJS.com - Display your tweets on your website using Javascript alone\r\n// Copyright 2019 Infinite Loop Development Ltd - InfiniteLoop.ie\r\n// Do not remove this notice.\r\n\r\nexport const TweetJs = {\r\n  ListTweetsOnUserTimeline: function(screenName, callback) {\r\n    TweetJs._callApi(\r\n      {\r\n        Action: 'ListTweetsOnUserTimeline',\r\n        ScreenName: screenName\r\n      },\r\n      callback\r\n    );\r\n  },\r\n  Search: function(query, callback) {\r\n    TweetJs._callApi(\r\n      {\r\n        Action: 'Search',\r\n        Query: query\r\n      },\r\n      callback\r\n    );\r\n  },\r\n  _callApi: function(request, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    URL = 'https://www.tweetjs.com/API.aspx';\r\n    xhr.open('POST', URL);\r\n    xhr.onreadystatechange = function() {\r\n      if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\r\n        callback(JSON.parse(xhr.response));\r\n      }\r\n    };\r\n    xhr.send(JSON.stringify(request));\r\n  }\r\n};\r\n","import React, { Component } from 'react';\nimport { TweetJs } from '../../services/tweetjs';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport './Tweets.scss';\n\nexport default class Tweets extends Component {\n  componentDidMount() {\n    TweetJs.Search('%23superbowl', data => {\n      this.props.updateTweets(data);\n    });\n  }\n\n  render() {\n    const { tweets } = this.props;\n    return (\n      <ul className=\"tweet__list\">\n        {tweets.map(id => (\n          <li className=\"tweet__item\">\n            <TwitterTweetEmbed\n              tweetId={id}\n              key={id}\n              options={{ width: '320px' }}\n            />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport Home from '../Home/index';\nimport Tweets from '../Tweets/index';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: []\n    };\n  }\n\n  updateTweets = tweetsResponse => {\n    this.setState({\n      tweets: tweetsResponse.statuses.map(({ id_str }) => id_str)\n    });\n  };\n\n  render() {\n    const { tweets } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/tweets\">Tweets</Link>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <main>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route\n              exact\n              path=\"/tweets\"\n              render={() => (\n                <Tweets updateTweets={this.updateTweets} tweets={tweets} />\n              )}\n            />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/index';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}